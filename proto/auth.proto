syntax = "proto3";

package proto;

option go_package = "github.com/JunBSer/services_proto/gen/go;authpb";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Auth Service API";
        version: "1.0";
        contact: {
            name: "JunBSer";
            url: "https://github.com/JunBSer";
            email: "aleksei.radzetskiiw@gmail.com";
        };
        license: {
            name: "MIT";
            url: "https://opensource.org/licenses/MIT";
        };
    };

    host: "localhost:8080";
    schemes: HTTP;
    schemes: HTTPS;
    
    consumes: "application/json";
    produces: "application/json";

    security_definitions: {
        security: {
            key: "bearerAuth";
            value: {
                description: "JWT authentication using the Bearer scheme";
            }
        }
    };
};

service Auth {
    // methods that aren't subject to auth middleware 
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/auth/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "User login"
            description: "Authenticates user and returns JWT tokens"
            tags: "Authentication"
            responses: {
                key: "200"
                value: {
                    description: "Success response with tokens"
                    schema: {
                        json_schema: {
                            ref: "#/definitions/protoLoginResponse"
                        }
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Invalid request parameters"
                }
            }
        };
    }

    rpc Logout(LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
            post: "/v1/auth/logout"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "User logout"
            description: "Invalidates user's authentication tokens"
            tags: "Authentication"
            security: {
                security_requirement: {
                    key: "bearerAuth";
                    value: {};
                }
            }
            responses: {
                key: "204"
                value: {
                    description: "Successfully logged out"
                }
            }
        };
    }

    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/v1/auth/register"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Register new user"
            description: "Creates new user account and returns initial tokens"
            tags: "Authentication"
            responses: {
                key: "201"
                value: {
                    description: "User created successfully"
                }
            }
        };
    }


    rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
        option (google.api.http) = {
            put: "/v1/users/set_password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Change user password"
            description: "Updates user's password"
            tags: "User Management"
            security: {
                security_requirement: {
                    key: "bearerAuth";
                    value: {};
                }
            }
            responses: {
                key: "204"
                value: {
                    description: "Password changed successfully"
                }
            }
        };
    }

    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);

    // methods that are subject to auth middleware


    // admin method
    rpc DeleteUser(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/users/{user_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete user account"
            description: "Permanently deletes user account"
            tags: "User Management"
            security: {
                security_requirement: {
                    key: "bearerAuth";
                    value: {};
                }
            }
            responses: {
                key: "204"
                value: {
                    description: "User deleted successfully"
                }
            }
        };
    }

    //user methods

    rpc RefreshToken(RefreshRequest) returns (RefreshResponse) {
        option (google.api.http) = {
            post: "/v1/auth/refresh"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Refresh tokens"
            description: "Generates new JWT pair using refresh token"
            tags: "Authentication"
            responses: {
                key: "200"
                value: {
                    description: "New tokens generated"
                }
            }
        };
    }
}


message JWTPair {
    string access_token = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Access token for API authorization",
        }
    ];
    
    string refresh_token = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Refresh token for obtaining new access tokens",
        }
    ];
}


message RefreshRequest {
    string refresh_token = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Valid refresh token",
        }
    ];
}

message RefreshResponse{
    JWTPair tokens = 1;
}

message LoginRequest {
    string email = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "User's email address",
        }
    ];
    
    string password = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "User's password",
            format: "password",
        }
    ];
}

message LoginResponse {
    JWTPair tokens = 1;
}


message LogoutRequest {
    string refresh_token = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Refresh token to invalidate",           
        }
    ];
}


message LogoutResponse {
    Status status = 1;
}


message RegisterRequest {
    string email = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "User's email address",
        }
    ];
    
    string password = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Desired password",
            format: "password",
        }
    ];
}


message RegisterResponse {
    JWTPair tokens = 1;
}


message DeleteRequest {
    string user_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "ID of the user to delete",
            example: "550e8400-e29b-41d4-a716-446655440000"
        }
    ];
}


message DeleteResponse {
    Status status = 1;
}


message ValidateTokenRequest {
    string token = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "JWT token to validate",
        }
    ];
}

message ValidateTokenResponse {
    bool is_valid = 1;
    int64 expires_at = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Token expiration timestamp",
            example: "1678901234"
        }
    ];
}

message ChangePasswordRequest {    
    string JWT = 1;
    string old_password = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Current password",
            format: "password"
        }
    ];
    
    string new_password = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "New password",
            format: "password"
        }
    ];
}


message ChangePasswordResponse {
    Status status = 1;
}


enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
}